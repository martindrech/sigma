# -*- coding: utf-8 -*-
"""
Created on Fri Dec 19 18:30:23 2014

@author: martindrech
"""


from __future__ import division
import numpy as np
from scipy.integrate import quad
from erres import R3_bajaT as int_baja


'''
y''+(a-2q cos(2t))y = 0
nu es el exp de floquet, c el vector con la expansion de fourier de p(t)
'''

def deriv(x, t):
    """
    Deriva funcion x(t), y devuelve array de igual largo que x. dx[0]=dx[1]
    """
    dt = t[1]-t[0]
    dx = np.diff(x)/dt
    dx = np.append([dx[0]], dx)
    return dx
    
    
def p(t, c):
    """
    Devuelve la funcion periodica P(t)
    """
    p = np.zeros(np.size(t)) + 0j
    c = c + 0j
    n = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    if np.size(t) > 1: 
        for i, tau in enumerate(t):
            p[i] = np.dot(c, np.exp(2*tau*n*1j))
    else: 
        p = np.dot(c, np.exp(2*t*n*1j))
    return p

def B(c, nu):
    """
    Devuelve el coef B que aparece en las dispersiones
    """
    t = np.array([0, 0.00001])
    P = p(t, c)
    dp = (P[1]-P[0])/(t[1]-t[0])
    p0 = P[0]
#    print p0
    return 1j/( p0 * (dp+nu*p0*1j))

def C(c, nu):
    """
    Devuelve el coef C que aparece en las phi
    """
    t = np.array([0, 0.00001])
    P = p(t, c)
    dp = (P[1]-P[0])/(t[1]-t[0])
    p0 = P[0]
#    print p0
    return 1j/( dp+nu*p0*1j )
    
def y1(t, c, nu):
    """
    Solucion de eq. de mathieu sin ci
    """
    return np.exp(1j*nu*t)*p(t, c)

def y2(t, c, nu):
    """
    Solucion de eq. de mathieu sin ci
    """
    return np.exp(-1j*nu*t)*p(-t, c)
        
def phi1(t, c, nu):
    """
    Solucion de eq. de mathieu con ci = [0,1]
    """
    t_inf= np.array([0, 0.0001])
    dp = (p(t_inf[1], c)-p(t_inf[0], c))/(t_inf[1]-t_inf[0])
    cte = 2*(dp+1j*nu*p(t_inf[0], c))
    
    return (y1(t,c,nu)-y2(t,c,nu))/cte
    
def phi2(t, c, nu):
    """
    Solucion de eq. de mathieu con ci = [1,0]
    """
    
    cte = 2*p(0, c)
    return (y1(t,c,nu)+y2(t,c,nu))/cte
    
    
def G(t, s, c, nu):
    """
    Funcion G(t, s)
    """
    return phi1(t, c, nu)*phi2(s, c, nu)-phi1(s, c, nu)*phi2(t, c, nu)
### funciones auxiliares###
    

def complex_int(f, a, b, *args):
   """
   Integra numericamente funcion f entre a y b, siendo f compleja
   """
   
   def real_f(x, *args):
       return np.real(f(x, *args))       
   def imag_f(x, *args):
       return np.imag(f(x, *args))    
     
   real_int = quad(real_f, a, b, *args)[0]
   imag_int = quad(imag_f, a, b, *args)[0]
   
   return real_int + imag_int * 1j
   
def R(w, t, n, m, k, l, g, nu):
    """
    El R_nmkl que hay que integrar en frecuencia
    """
    a, b = nu.real, nu.imag
    bm, bl = 2*m+a+b*1j, 2*l+a-b*1j
    anm, bnm, akl, bkl = np.cos(2*t*(n-m)), np.sin(2*t*(n-m)), np.cos(2*t*(k-l)), np.sin(2*t*(k-l)) 
    g1, g2  = g/2+w*1j, g/2-w*1j
    
    return ((bm*anm+g1*bnm)/(g1**2+bm**2))*((bl*akl+g2*bkl)/(g2**2+bl**2))
    
    
def int_baja_num(wc, t, n, m, k, l, g, nu):
    """
    Integral numerica de alpha(w)*R_nmkl a bajas temperaturas
    """
    def integrando(w, t, n, m, k, l, g, nu):
        return w*R(w, t, n, m, k, l, g, nu)
        
    inte = np.array([])
    for ti in t:
        valor = complex_int(integrando, 0, wc, (ti, n, m, k, l, g, nu))
        inte = np.append(inte, [valor])
#        print ti
    return inte
    
    

#def int_baja(w, t, n, m, k, l, g, nu):
#    """
#    Integral de alpha(w)*R_nmkl a bajas temperaturas, la que me da wolfram por ahora
#    """
#    a, b = nu.real, nu.imag
#    re = 4*(((8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3+16*a**2*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))+8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g+4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g+16*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g+4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g+4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2+4*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2+a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3+np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3+5*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3+a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**4+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l+40*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l+8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l+40*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2-24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2+40*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+24*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2+12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2+28*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3-16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3+64*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3+8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**4+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m-8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m+24*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m-8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m+24*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*m+4*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m-32*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l*m+64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m-8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m+24*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m+24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m-48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m-32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2*m-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2+24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2-8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2-8*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2-4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2+12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+4*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2+48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2-32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3+16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**3+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**3)*np.arctan((2*(-a-2*l+w))/(2*b+g)))/(16*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3+16*a**2*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))-8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g-4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g-16*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g-4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g+4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2+4*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2+a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3-np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3-5*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3+a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**4-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l+40*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l-8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l-40*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2-24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2+40*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+24*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2-12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2-28*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3-16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3+64*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3+8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**4-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m-8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m+24*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m+8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m-24*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*m+4*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m-32*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l*m-64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m+8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m-24*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m+24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m-48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m-32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2*m-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2+24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2-8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2-8*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2+4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2-12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+4*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2+48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2-32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3+16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**3+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**3)*np.arctan((2*(a+2*l+w))/(2*b-g)))/(16*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3+16*a**2*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))+8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g+16*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g+4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g+4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g+4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2+4*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2+a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3+5*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3+np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3+a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**4+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l+24*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l+24*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l-8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*l+4*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*l+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2-8*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2+24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2+12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2-4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+4*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3+16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**3+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m+40*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m+40*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m+8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m-32*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m+32*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l*m+64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m+24*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m-8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m+24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m-32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m+48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2*m+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2+40*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2+24*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2-24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2+28*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2+12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+12*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2-32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2-48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m**2-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3+64*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3-16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**3+8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**3-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**3+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**4)*np.arctan((2*(-a-2*m+w))/(2*b+g)))/(16*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3+16*a**2*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))-8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g-16*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g-4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g-4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g+4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2+4*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2+a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3-5*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3-np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3+a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**4-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l+24*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l-24*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l+8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*l+4*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*l-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2-8*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2+24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2-12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2+4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+4*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3+16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**3-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m+40*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m-40*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m-8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m-32*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m+32*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l*m-64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m-24*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m+8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m+24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m-32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m+48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2*m+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2+40*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2+24*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2-24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2-28*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2-12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+12*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2-32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2-48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m**2-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3+64*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3-16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**3+8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**3-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**3+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**4)*np.arctan((2*(a+2*m+w))/(2*b-g)))/(16*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))+8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))-8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))+8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))+16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g+4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g-4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g+16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2+4*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2+4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2-np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3+a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3-a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l+24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l-24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l+40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l-2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2+32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2-16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2+40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3+16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**3+64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**3-8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**4-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m+24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m-24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m+12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m+24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m+4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*m+4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m+32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m-64*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m-32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m+24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m-24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m+16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m-32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2+32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2-16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2-8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2+16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2-32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3+16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**3+8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3)*np.log(4*a**2+4*b**2+4*b*g+g**2+16*a*l+16*l**2-8*a*w-16*l*w+4*w**2))/(32*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))-8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))+8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))-8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))+16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g+4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g-4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g-16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2-4*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2+4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3+a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3-a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l-40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l-2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2+16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2+40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**3+64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**3-8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**4-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m+12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m-24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m-4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*m+4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m+64*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m-32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m+24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m-24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m+32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2+16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2-8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2+32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**3+8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3)*np.log(4*a**2+4*b**2-4*b*g+g**2+16*a*l+16*l**2+8*a*w+16*l*w+4*w**2))/(32*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))+8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))+8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))+8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))+16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g-4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g+4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g+16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2+4*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2+4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2-np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3-a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3+a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l+12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l+24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*l+8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l+4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2-16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2-8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**3+8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m+40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m-64*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m-32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m-24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m+24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m-32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2-16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2+40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2-32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**3+64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**3-8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**4)*np.log(4*a**2+4*b**2+4*b*g+g**2+16*a*m+16*m**2-8*a*w-16*m*w+4*w**2))/(32*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))-8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))-8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))-8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))+16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g-4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g+4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g-16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2-4*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2+4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3-a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3+a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l+24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l-24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l+12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l-24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*l-8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l+4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2+16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2-32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2-8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3-16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**3+8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m+24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m-24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m-40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m+64*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m-32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m-32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m-24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m+24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m+32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m-16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2+16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2-32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2+40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2+32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2-16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3-16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**3+64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**3-8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**4)*np.log(4*a**2+4*b**2-4*b*g+g**2+16*a*m+16*m**2+8*a*w+16*m*w+4*w**2))/(32*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2)))
#    imag= 8*(((-8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))-8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))+8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))-8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))-16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g-4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g-8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g+4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g-16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2-4*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2-4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2-8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3-a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3+a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l-4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l-40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l-12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2+16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2-40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**3-64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**3+8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**4+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m-12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m-24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m-4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*m-4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m+64*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m+32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m-24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m+24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m+32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m+32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2+16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2+8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2+32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2+32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**3-8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3)*np.arctan((2*(-a-2*l+w))/(2*b+g)))/(32*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))-8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))+8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))-8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))+16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g+4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g-4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g-16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2-4*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2+4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3+a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3-a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l-40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l-2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2+16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2+40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**3+64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**3-8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**4-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m-8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m-8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m+12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m-24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m-4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*m+4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m+64*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m-32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m+24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m-24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m+32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2-32*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2+16*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2-8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2+32*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3-16*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**3+8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3)*np.arctan((2*(a+2*l+w))/(2*b-g)))/(32*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))+8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))+8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))+8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))+16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g-4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g+4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g+16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2+4*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2+4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2-np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3-a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3+a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l+12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l+24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*l+8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l+4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2-16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2-8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**3+8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m-12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m+12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m+40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m-64*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m-32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m-24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m+24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m-32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2-16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2+40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2-32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2-32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**3+64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**3-8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**4)*np.arctan((2*(-a-2*m+w))/(2*b+g)))/(32*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))+8*a*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))+8*a**3*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))+8*a*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))-16*a**2*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*g+4*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g-8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g-4*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g+16*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g**2+4*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2-4*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2-8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2-np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**3+a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3-a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+5*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**4+8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*l+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*l+8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-24*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l-12*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*l-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-12*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*l+24*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*l+8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**2*l-4*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l-2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*l**2-16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2+8*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-8*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-4*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2+16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**3-8*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m-24*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m+8*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*m+24*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m+8*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*m-8*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-40*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m+12*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m-4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g*m-12*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g*m+40*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**2*m-12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**3*m-64*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m+32*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-32*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*l*m+24*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l*m-24*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+24*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**2*m-32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l**2*m+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l**2*m+32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*l**2*m+32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l**3*m-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*m**2-16*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*m**2+32*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**2-40*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-24*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g*m**2+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**2-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+28*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-12*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2-48*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**2-32*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*l*m**2+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*l*m**2+32*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-24*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2+32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2-16*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*m**3+16*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*m**3-64*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**3+8*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g*m**3-32*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*l*m**3-32*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**4)*np.arctan((2*(a+2*m+w))/(2*b-g)))/(32*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3+16*a**2*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))+8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g+4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g+16*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g+4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g+4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2+4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2+4*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2+a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3+np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3+5*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3+a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**4+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l+40*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l+8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l+40*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2-24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2+40*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+24*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2+12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2+28*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+12*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3-16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3+64*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3+8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**4+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m-8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m+24*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m-8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m+24*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*m+4*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m-32*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+32*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l*m+64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m-8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m+24*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m+24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m-48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m-32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2*m-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2+24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2-8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2-8*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2-4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2+12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+4*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2+48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2-32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3+16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**3+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**3)*np.log(4*a**2+4*b**2+4*b*g+g**2+16*a*l+16*l**2-8*a*w-16*l*w+4*w**2))/(64*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3-16*a**2*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))+8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g+4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g+16*a**2*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g+4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g-4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2-4*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2-4*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2-8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2-a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3+np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3+5*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3-a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**4+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l-8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l-40*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l+8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l+40*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l-12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-12*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l-2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*l+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2+24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2-8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2-40*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-24*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2+12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2+28*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2-12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-12*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3+16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3-64*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3-8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**3-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**4+24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m+8*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m-24*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m+24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m-12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m-8*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m+24*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m-12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*m-4*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m+32*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-32*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l*m+64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m-8*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m+24*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m-24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m+48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m+32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2*m+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**3*m+32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2-24*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2+8*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2+16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2-4*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2+12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2-12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-4*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2-48*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2+32*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m**2+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m**2+16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3-16*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**3-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**3)*np.log(4*a**2+4*b**2-4*b*g+g**2+16*a*l+16*l**2+8*a*w+16*l*w+4*w**2))/(64*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3-16*a**2*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))-8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))-4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g-16*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g-4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g-4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g-4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g+8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2-4*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2-8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2-4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2-a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3-5*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3-np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3-a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3-np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**4-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l-24*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l-12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l-12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l-24*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l+8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l-12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l+12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*l-4*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l-2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*l-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2+8*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2-8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2-24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2-12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2+4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2-12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2-4*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3-16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**3-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m-40*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m-8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m-12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m-4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m-40*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m-8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m-12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m-2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m+32*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m-32*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l*m-64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m-24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m-24*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m+8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m-24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m+32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m-48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2*m-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2-40*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2-24*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2+24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2-12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2-28*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2-12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2-12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2-12*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2+32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2+48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m**2+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3-64*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3+16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**3-8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**3+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**3-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**4)*np.log(4*a**2+4*b**2+4*b*g+g**2+16*a*m+16*m**2-8*a*w-16*m*w+4*w**2))/(64*(4*b**2+4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2))+((-8*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b-8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3+16*a**2*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))-8*a**3*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+8*a*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))+4*a**3*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g+8*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g-16*a**2*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g-4*np.cos(2*t*(n-m))*b**3*np.sin(2*t*(k-l))*g-4*np.cos(2*t*(k-l))*b**3*np.sin(2*t*(n-m))*g+4*a**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-8*a*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g-4*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2+4*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*g**2+4*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*g**2+a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3-5*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g**3-np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g**3+a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3+np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**4-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*l-8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l+24*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l+8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l-8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l+12*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*l-24*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l+8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-12*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*g**2*l+4*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l+4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*l+2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g**3*l-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2-8*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2+8*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l**2+24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2-8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*l**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**2-12*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l**2+4*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2+4*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*l**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**3+16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3+8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l**3-24*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m-8*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**3*m+8*a**3*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m+40*a*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m-8*a**3*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*a*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m-24*a**2*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+8*b**3*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m+12*a**2*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m+4*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b**2*g*m-40*a*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m-8*a*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m+12*a**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m-4*b**2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m+12*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m-4*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**2*m+2*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m-32*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m+32*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*l*m-64*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m+24*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m-24*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*l*m+8*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*l*m+24*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l*m-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l**2*m-32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m+48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l**2*m+24*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*l**2*m+32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l**3*m-32*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**2+40*a**2*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**2+24*np.cos(2*t*(n-m))*b**2*np.sin(2*t*(k-l))*m**2-24*a**2*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+8*np.cos(2*t*(k-l))*b**2*np.sin(2*t*(n-m))*m**2-16*a*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*m**2+12*a*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*m**2-28*np.cos(2*t*(n-m))*b*np.sin(2*t*(k-l))*g*m**2-12*np.cos(2*t*(k-l))*b*np.sin(2*t*(n-m))*g*m**2+12*a*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**2+12*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*g**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*l*m**2-32*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l*m**2-48*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2-32*b*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**2+24*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*g*l*m**2-32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*l**2*m**2-16*np.cos(2*t*(k-l))*np.cos(2*t*(n-m))*b*m**3+64*a*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**3-16*a*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*m**3+8*np.sin(2*t*(k-l))*np.sin(2*t*(n-m))*g*m**3-32*np.cos(2*t*(k-l))*np.sin(2*t*(n-m))*l*m**3+32*np.cos(2*t*(n-m))*np.sin(2*t*(k-l))*m**4)*np.log(4*a**2+4*b**2-4*b*g+g**2+16*a*m+16*m**2+8*a*w+16*m*w+4*w**2))/(64*(4*b**2-4*b*g+g**2+4*l**2-8*l*m+4*m**2)*(4*a**2+g**2+8*a*l+4*l**2+8*a*m+8*l*m+4*m**2)))
#    
#    return re + 1j * imag
    
     
    
def S_pp_baja_int(w, t, n, m, g, nu):
    """
    La integral que va en S_pp_baja
    """
    ret = (4*np.sin(2*t*(n-m))*(2*m+nu)*np.arctan((2*((2*m+nu)-w))/g)+2*np.cos(2*t*(n-m))*g*np.arctan((2*(-(2*m+nu)+w))/g)+4*np.sin(2*t*(n-m))*(2*m+nu)*np.arctan((2*((2*m+nu)+w))/g)-2*np.cos(2*t*(n-m))*g*np.arctan((2*((2*m+nu)+w))/g)-2*np.cos(2*t*(n-m))*(2*m+nu)*np.log(4*(2*m+nu)**2+g**2-8*(2*m+nu)*w+4*w**2)-np.sin(2*t*(n-m))*g*np.log(4*(2*m+nu)**2+g**2-8*(2*m+nu)*w+4*w**2)-2*np.cos(2*t*(n-m))*(2*m+nu)*np.log(4*(2*m+nu)**2+g**2+8*(2*m+nu)*w+4*w**2)-np.sin(2*t*(n-m))*g*np.log(4*(2*m+nu)**2+g**2+8*(2*m+nu)*w+4*w**2))/4
    return ret
    
def S_pp_baja_int_num(wc, t, n, m, g, nu):
    """
    La integral que va en S_pp_baja, pero numericamente
    """
        
    def L(w, t, n, m, g, nu):
        anm, bnm, bm = np.cos(2*t*(n-m)), np.sin(2*t*(n-m)), 2*m+nu

        return (4*(bm-w)*anm-2*g*bnm)/(g**2+4*(bm-w)**2)
        
    def integrando(w, t, n, m, g, nu):
        return w* ( L(w, t, n, m, g, nu)+L(-w, t, n, m, g, nu) )
    
    inte = np.array([])
    for ti in t:
        valor = complex_int(integrando, 0, wc, (ti, n, m, g, nu))
        inte = np.append(inte, [valor])
        
    return inte 



def f1J(t,c,nu, g, wc):
    """
    El termino que hace falta para tener sigma_pp, para bajas temperaturas
    """
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    def R_p(w, t, n, m, g, nu):
        return 1/8*(-(np.log(g**2+4*(2*m-w+nu)**2)+np.log(g**2+4*(2*m+w+nu)**2))*(2*(2*m+nu)*np.cos(2*(m-n)*t)+g*np.sin(2*(m-n)*t))+np.arctan((2*(2*m-w+nu))/g)*(-2*g*np.cos(2*(m-n)*t)+4*(2*m+nu)*np.sin(2*(m-n)*t))+np.arctan((2*(2*m+w+nu))/g)*(-2*g*np.cos(2*(m-n)*t)+4*(2*m+nu)*np.sin(2*(m-n)*t)))
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            r = c[n_i]*c[m_i]*(R_p(wc, t, n, m, g, nu)-R_p(0, t, n, m, g, nu))
            suma = suma + r
   
    return suma * (B(c, nu) * g / np.pi )
   
def S_pp_baja_num(t, c, nu, g, wc):
    """
    El termino que hace falta para tener sigma_pp, para bajas temperaturas
    """ 
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            r = c[n_i]*c[m_i]*S_pp_baja_int_num(wc, t, n, m, g, nu)
            suma = suma + r
            
    return suma * (B(c,nu) * g) / (np.pi)

    
def sigma_baja(t, c, nu, g, wc, e):
    """
    Devuelve, para T=0 las dispersiones sxx, spp, sxp
    """
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print n_i, m_i, k_i, l_i

                    r = c[n_i]*c[m_i]*np.conj(c[k_i]*c[l_i])*(int_baja(wc, t, n, m, k, l, g, nu, nu)-int_baja(0, t, n, m, k, l, g, nu, nu))
                    suma = suma + r
                    
    sxx = suma * (np.abs(B(c,nu))**2 * g / np.pi)
    
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx-f1J(t, c, nu, g, wc)+sxp_dt+g*sxp
    
#    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)


    return sxx, spp, sxp

def sigma_baja_est(t, c, nu, g, wc):
    """
    Devuelve, para T=0 las dispersiones sxx, spp, sxp, si no hay driving
    """
    n,m,k,l = 0,0,0,0
    r = (int_baja(wc, t, n, m, k, l, g, nu)-int_baja(0, t, n, m, k, l, g, nu))
    
    ce = np.array([1])
    
    sxx = r * (np.abs(B(c,nu))**2 *g / np.pi)
    sxp = deriv(sxx, t)
    
    spp = sxx - f1J(t, ce, nu, g, wc)
    
    


    return sxx, spp, sxp
    
    
def sigma_baja_num(t, c, nu, g, wc, e):
    """
    Devuelve, para T=0 las dispersiones sxx, spp, sxp. Las int hechas numericamente. 
    """
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print n_i, m_i, k_i, l_i
                    r = c[n_i]*c[m_i]*np.conj(c[k_i]*c[l_i])*int_baja_num(wc, t, n, m, k, l, g, nu)
                    suma = suma + r
    sxx = suma * (np.abs(B(c,nu))**2 *g / np.pi)
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx-S_pp_baja_num(t, c, nu, g, wc)+sxp_dt+g*sxp
    
#    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)


    return sxx, spp, sxp
    
    

def sigma_alta(t, c, nu, g, e):
    """
    Disp para T infinita. 
    """
    
    def int_alta(t, n, m, k, l, g, nu):
        ret = ((g*np.cos(2*(k-l+m-n)*t)+2*(-l+m)*np.sin(2*(k-l+m-n)*t))/(4*(l-m)**2+g**2)-(g*np.cos(2*(-k+l+m-n)*t)+2*(l+m+nu)*np.sin(2*(-k+l+m-n)*t))/(g**2+4*(l+m+nu)**2))/2
        return ret
    
    
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print n, m, k, l
                    
                    r = c[n_i]*c[m_i]*c[k_i]*c[l_i]*int_alta(t, n, m, k, l, g, nu)
                    suma = suma + r
                    
    sxx = suma *  ( 2*g*B(c,nu)**2 )
    sxx = suma * (B(c,nu)**2 *g / np.pi)
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx+sxp_dt+g*sxp
    
    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)
    
    return sxx, spp, sxp

def coth(x): 
        if x>=100:
            
            return 1
        else:
                return np.cosh(x)/np.sinh(x)
            
def S_pp_int_num(wc, t, n, m, g, nu, T):
    """
    La integral que va en S_pp_baja, pero numericamente
    """
    
    def L(w, t, n, m, g, nu):
        anm, bnm, bm = np.cos(2*t*(n-m)), np.sin(2*t*(n-m)), 2*m+nu

        return (4*(bm-w)*anm-2*g*bnm)/(g**2+4*(bm-w)**2)
        
    def integrando(w, t, n, m, g, nu, T):
        return w * ( L(w, t, n, m, g, nu)+L(-w, t, n, m, g, nu) ) * coth(w/(2*T))
    
    inte = np.array([])
    for ti in t:
        valor = complex_int(integrando, 0, wc, (ti, n, m, g, nu, T))
        inte = np.append(inte, [valor])
        
    return inte

####################################################
def sigma_num(t, c, nu, g, wc, e, T):
    
    """
    Devuelve, para T arbitraria las dispersiones sxx, spp, sxp
    """
    if wc/(2*T) >= 100:
        print 'warning: coth es 1'
    

        
    def alpha_R(w, t, n,m,k,l, g, nu, T):
        return w *   coth(w/(2*T))   * R(w,t,n,m,k,l,g,nu)
         
    def integ(wc, t, n, m, k, l, g, nu, T):
        ret = np.array([])
        for ti in t:
            
            valor = complex_int(alpha_R, .0001, wc, (ti, n, m, k, l, g, nu, T))
            ret = np.append(ret, [valor])
        
        return ret
        
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print 'Num: ', n, m, k, l
                    r = c[n_i]*c[m_i]*np.conj(c[k_i]*c[l_i]) * integ(wc, t, n, m, k, l, g, nu, T)
                    suma = suma + r
                    
    sxx = suma * (np.abs(B(c,nu))**2 *g / np.pi)
    
    def S_pp(t, c, nu, g, wc, T):
        """
        El termino que hace falta para tener sigma_pp
        """ 
        enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
        
        suma = np.array(np.zeros(len(t)))
        for n_i, n in enumerate(enes):
            for m_i, m in enumerate(enes):
                r = c[n_i]*c[m_i]*S_pp_int_num(wc, t, n, m, g, nu, T)
                suma = suma + r
                
        return suma * (B(c,nu) * g) / (np.pi)
        
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx-S_pp(t, c, nu, g, wc, T)+sxp_dt+g*sxp
    
#    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)


    return sxx, spp, sxp
################################################################3
