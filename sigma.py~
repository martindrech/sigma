# -*- coding: utf-8 -*-
"""
Created on Fri Dec 19 18:30:23 2014

@author: martindrech
"""


from __future__ import division
import numpy as np
from scipy.integrate import quad


'''
y''+(a-2q cos(2t))y = 0
nu es el exp de floquet, c el vector con la expansion de fourier de p(t)
'''

def deriv(x, t):
    """
    Deriva funcion x(t), y devuelve array de igual largo que x. dx[0]=dx[1]
    """
    dt = t[1]-t[0]
    dx = np.diff(x)/dt
    dx = np.append([dx[0]], dx)
    return dx
    
    
def p(t, c):
    """
    Devuelve la funcion periodica P(t)
    """
    p = np.zeros(np.size(t)) + 0j
    c = c + 0j
    n = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    if np.size(t) > 1: 
        for i, tau in enumerate(t):
            p[i] = np.dot(c, np.exp(2*tau*n*1j))
    else: 
        p = np.dot(c, np.exp(2*t*n*1j))
    return p

def B(c, nu, t):
    """
    Devuelve el coef B que aparece en las dispersiones
    """
    P = p(t, c)
    dp = (p(t[1], c)-p(t[0], c))/(t[1]-t[0])
    
    return 1j/( P[0]*(dp+nu*P[0]*1j))
    
def y1(t, c, nu):
    """
    Solucion de eq. de mathieu sin ci
    """
    return np.exp(1j*nu*t)*p(t, c)

def y2(t, c, nu):
    """
    Solucion de eq. de mathieu sin ci
    """
    return np.exp(-1j*nu*t)*p(-t, c)
        
def phi1(t, c, nu):
    """
    Solucion de eq. de mathieu con ci = [0,1]
    """
    dp = (p(t[1], c)-p(t[0], c))/(t[1]-t[0])
    cte = 2*(dp+1j*nu*p(t[0], c))
    
    return np.real((y1(t,c,nu)-y2(t,c,nu))/cte)
    
def phi2(t, c, nu):
    """
    Solucion de eq. de mathieu con ci = [1,0]
    """
    cte = 2*p(t[0], c)
    return np.real((y1(t,c,nu)+y2(t,c,nu))/cte)
    
### funciones auxiliares###
    

def complex_int(f, a, b, *args):
   """
   Integra numericamente funcion f entre a y b, siendo f compleja
   """
   
   def real_f(x, *args):
       return np.real(f(x, *args))       
   def imag_f(x, *args):
       return np.imag(f(x, *args))    
     
   real_int = quad(real_f, a, b, *args)[0]
   imag_int = quad(imag_f, a, b, *args)[0]
   
   return real_int + imag_int * 1j
   
def R(w, t, n, m, k, l, g, nu):
    """
    El R_nmkl que hay que integrar en frecuencia
    """
    bm, bl = 2*m+nu, 2*l+nu
    anm, bnm, akl, bkl = np.cos(2*t*(n-m)), np.sin(2*t*(n-m)), np.cos(2*t*(k-l)), np.sin(2*t*(k-l)) 
    g1, g2  = g/2+w*1j, g/2-w*1j
    
    return ((bm*anm+g1*bnm)/(g1**2+bm**2))*((bl*akl+g2*bkl)/(g2**2+bl**2))
    
    
def int_baja_num(wc, t, n, m, k, l, g, nu):
    """
    Integral numerica de alpha(w)*R_nmkl a bajas temperaturas
    """
    def integrando(w, t, n, m, k, l, g, nu):
        return w*R(w, t, n, m, k, l, g, nu)
        
    inte = np.array([])
    for ti in t:
        valor = complex_int(integrando, 0, wc, (ti, n, m, k, l, g, nu))
        inte = np.append(inte, [valor])
#        print ti
    return inte
    
    

def int_baja(w, t, n, m, k, l, g, nu):
    """
    Integral de alpha(w)*R_nmkl a bajas temperaturas, la que me da wolfram por ahora
    """
    a = 
    ret = ((2*1j)*(np.cos(2*t*(n-m))*((2*1j)*b+m)*(-16*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))+(4*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(3*l+m)+2*np.cos(2*t*(k-l))*l*(l**2-m**2)+np.sin(2*t*(k-l))*g*(g**2+3*l**2+m**2))+32*a**3*(np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g+np.sin(2*t*(k-l))*(-l+m)))+8*a**2*(3*np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*((4*1j)*b+l+m)+np.sin(2*t*(n-m))*(3*np.cos(2*t*(k-l))*g*((-4*1j)*b-l-m)+np.sin(2*t*(k-l))*(2*g**2+(l-m)*((12*1j)*b+5*l+m))))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*((2*1j)*b+l)*(16*b**2-g**2-l**2-3*m**2-(4*1j)*b*(l+3*m))+np.sin(2*t*(k-l))*(g**4-(32*1j)*b**3*(l-m)+2*l**2*(l**2-m**2)-8*b**2*(2*g**2+5*l**2-4*l*m-m**2)+g**2*(3*l**2+m**2)+(4*1j)*b*(g**2*(3*l+m)+2*l*(2*l**2-l*m-m**2))))-2*a*(np.cos(2*t*(n-m))*(48*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-(24*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(l+m)+2*np.cos(2*t*(k-l))*(-l**3-3*l**2*m+3*l*m**2+m**3)-np.sin(2*t*(k-l))*g*(g**2+3*(l+m)**2))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*(-48*b**2+g**2+(24*1j)*b*(l+m)+3*(l+m)**2)+2*np.sin(2*t*(k-l))*(24*b**2*(l-m)-g**2*(3*l+m)-(4*1j)*b*(2*g**2+5*l**2-4*l*m-m**2)+2*l*(-2*l**2+l*m+m**2)))))*np.arctan((4*(8*a*b+4*b*l-g*w))/(16*a**2-16*b**2+g**2+16*a*l+4*l**2-4*w**2))+(2*1j)*((-1j)*np.cos(2*t*(n-m))*(2*b-1j*m)*(-16*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))+(4*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(3*l+m)+2*np.cos(2*t*(k-l))*l*(l**2-m**2)+np.sin(2*t*(k-l))*g*(g**2+3*l**2+m**2))-32*a**3*(np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g+np.sin(2*t*(k-l))*(-l+m)))+8*a**2*(-3*np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*((4*1j)*b+l+m)+np.sin(2*t*(n-m))*(3*np.cos(2*t*(k-l))*g*((4*1j)*b+l+m)+np.sin(2*t*(k-l))*(2*g**2-(l-m)*((12*1j)*b+l+5*m))))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*((2*1j)*b+l)*(-16*b**2+g**2+l**2+3*m**2+(4*1j)*b*(l+3*m))+np.sin(2*t*(k-l))*(g**4+(32*1j)*b**3*(l-m)-2*l**2*m**2+2*m**4+g**2*(l**2+3*m**2)-8*b**2*(2*g**2-l**2-4*l*m+5*m**2)+(4*1j)*b*(g**2*(l+3*m)-2*m*(l**2+l*m-2*m**2))))+2*a*(np.cos(2*t*(n-m))*(48*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-(24*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(l+m)+2*np.cos(2*t*(k-l))*(-l**3-3*l**2*m+3*l*m**2+m**3)-np.sin(2*t*(k-l))*g*(g**2+3*(l+m)**2))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*(-48*b**2+g**2+(24*1j)*b*(l+m)+3*(l+m)**2)+2*np.sin(2*t*(k-l))*(24*b**2*(l-m)+g**2*(l+3*m)-2*m*(l**2+l*m-2*m**2)+(4*1j)*b*(2*g**2-l**2-4*l*m+5*m**2)))))*np.arctan((4*(8*a*b+4*b*m+g*w))/(16*a**2-16*b**2+g**2+16*a*m+4*m**2-4*w**2))-(4*1j)*(-32*a**3*(np.cos(2*t*(k-l))*(np.cos(2*t*(n-m))*g+np.sin(2*t*(n-m))*(l-m))+np.sin(2*t*(k-l))*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m)))+8*a**2*(-3*np.cos(2*t*(k-l))*(np.cos(2*t*(n-m))*g+np.sin(2*t*(n-m))*(l-m))*((4*1j)*b+l+m)+np.sin(2*t*(k-l))*(-3*np.sin(2*t*(n-m))*g*(l+m)+np.cos(2*t*(n-m))*(-2*g**2+l**2+4*l*m-5*m**2)-(12*1j)*b*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m))))+2*a*(np.cos(2*t*(k-l))*(-2*np.sin(2*t*(n-m))*(l-m)*(-24*b**2+l**2+4*l*m+m**2+(12*1j)*b*(l+m))-np.cos(2*t*(n-m))*g*(-48*b**2+g**2+(24*1j)*b*(l+m)+3*(l+m)**2))+np.sin(2*t*(k-l))*(48*b**2*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m))-np.sin(2*t*(n-m))*g*(g**2+3*(l+m)**2)-2*np.cos(2*t*(n-m))*(g**2*(l+3*m)-2*m*(l**2+l*m-2*m**2))-(8*1j)*b*(3*np.sin(2*t*(n-m))*g*(l+m)+np.cos(2*t*(n-m))*(2*g**2-l**2-4*l*m+5*m**2))))+1j*(np.cos(2*t*(k-l))*(2*b-1j*l)*(-2*np.sin(2*t*(n-m))*(l-m)*(-8*b**2+m*(l+m)+(2*1j)*b*(l+3*m))-np.cos(2*t*(n-m))*g*(-16*b**2+g**2+l**2+3*m**2+(4*1j)*b*(l+3*m)))+np.sin(2*t*(k-l))*(32*b**3*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m))-(8*1j)*b**2*(3*np.sin(2*t*(n-m))*g*(l+m)+np.cos(2*t*(n-m))*(2*g**2-l**2-4*l*m+5*m**2))-2*b*(np.sin(2*t*(n-m))*g*(g**2+3*(l+m)**2)+2*np.cos(2*t*(n-m))*(g**2*(l+3*m)-2*m*(l**2+l*m-2*m**2)))+1j*(np.sin(2*t*(n-m))*g*m*(g**2+3*l**2+m**2)+np.cos(2*t*(n-m))*(g**4-2*l**2*m**2+2*m**4+g**2*(l**2+3*m**2))))))*np.arctanh(((-1j)*g+2*w)/(2*(2*a+(2*1j)*b+m)))-(4*1j)*(32*a**3*(np.cos(2*t*(k-l))*(np.cos(2*t*(n-m))*g+np.sin(2*t*(n-m))*(l-m))+np.sin(2*t*(k-l))*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m)))+np.sin(2*t*(k-l))*((2*1j)*b+l)*(2*np.cos(2*t*(n-m))*m*(-l**2+m**2)+np.sin(2*t*(n-m))*g*(g**2+l**2+3*m**2)-16*b**2*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m))+(4*1j)*b*(l+3*m)*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m)))+8*a**2*(3*np.sin(2*t*(k-l))*((4*1j)*b+l+m)*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m))+np.cos(2*t*(k-l))*(3*np.cos(2*t*(n-m))*g*((4*1j)*b+l+m)+np.sin(2*t*(n-m))*(2*g**2+(l-m)*((12*1j)*b+5*l+m))))+np.cos(2*t*(k-l))*(np.cos(2*t*(n-m))*g*((2*1j)*b+m)*(-16*b**2+g**2+3*l**2+m**2+(4*1j)*b*(3*l+m))+np.sin(2*t*(n-m))*(g**4-(32*1j)*b**3*(l-m)+2*l**2*(l**2-m**2)-8*b**2*(2*g**2+5*l**2-4*l*m-m**2)+g**2*(3*l**2+m**2)+(4*1j)*b*(g**2*(3*l+m)+2*l*(2*l**2-l*m-m**2))))+2*a*(np.sin(2*t*(k-l))*(2*np.cos(2*t*(n-m))*(-l**3-3*l**2*m+3*l*m**2+m**3)-48*b**2*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m))+(24*1j)*b*(l+m)*(np.sin(2*t*(n-m))*g+np.cos(2*t*(n-m))*(-l+m))+np.sin(2*t*(n-m))*g*(g**2+3*(l+m)**2))+np.cos(2*t*(k-l))*(np.cos(2*t*(n-m))*g*(-48*b**2+g**2+(24*1j)*b*(l+m)+3*(l+m)**2)+2*np.sin(2*t*(n-m))*(-24*b**2*(l-m)+g**2*(3*l+m)+(4*1j)*b*(2*g**2+5*l**2-4*l*m-m**2)+2*l*(2*l**2-l*m-m**2)))))*np.arctanh((1j*g+2*w)/(4*a+(4*1j)*b+2*l))+(np.cos(2*t*(n-m))*((2*1j)*b+m)*(-16*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))+(4*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(3*l+m)+2*np.cos(2*t*(k-l))*l*(l**2-m**2)+np.sin(2*t*(k-l))*g*(g**2+3*l**2+m**2))+32*a**3*(np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g+np.sin(2*t*(k-l))*(-l+m)))+8*a**2*(3*np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*((4*1j)*b+l+m)+np.sin(2*t*(n-m))*(3*np.cos(2*t*(k-l))*g*((-4*1j)*b-l-m)+np.sin(2*t*(k-l))*(2*g**2+(l-m)*((12*1j)*b+5*l+m))))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*((2*1j)*b+l)*(16*b**2-g**2-l**2-3*m**2-(4*1j)*b*(l+3*m))+np.sin(2*t*(k-l))*(g**4-(32*1j)*b**3*(l-m)+2*l**2*(l**2-m**2)-8*b**2*(2*g**2+5*l**2-4*l*m-m**2)+g**2*(3*l**2+m**2)+(4*1j)*b*(g**2*(3*l+m)+2*l*(2*l**2-l*m-m**2))))-2*a*(np.cos(2*t*(n-m))*(48*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-(24*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(l+m)+2*np.cos(2*t*(k-l))*(-l**3-3*l**2*m+3*l*m**2+m**3)-np.sin(2*t*(k-l))*g*(g**2+3*(l+m)**2))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*(-48*b**2+g**2+(24*1j)*b*(l+m)+3*(l+m)**2)+2*np.sin(2*t*(k-l))*(24*b**2*(l-m)-g**2*(3*l+m)-(4*1j)*b*(2*g**2+5*l**2-4*l*m-m**2)+2*l*(-2*l**2+l*m+m**2)))))*np.log(256*a**4+256*b**4+g**4+512*a**3*l+8*g**2*l**2+16*l**4-128*b*g*l*w+8*g**2*w**2-32*l**2*w**2+16*w**4+32*a**2*(16*b**2+g**2+12*l**2-4*w**2)+32*a*(16*b**2*l-8*b*g*w+l*(g**2+4*l**2-4*w**2))-32*b**2*(g**2-4*(l**2+w**2)))+((-1j)*np.cos(2*t*(n-m))*(2*b-1j*m)*(-16*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))+(4*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(3*l+m)+2*np.cos(2*t*(k-l))*l*(l**2-m**2)+np.sin(2*t*(k-l))*g*(g**2+3*l**2+m**2))-32*a**3*(np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g+np.sin(2*t*(k-l))*(-l+m)))+8*a**2*(-3*np.cos(2*t*(n-m))*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*((4*1j)*b+l+m)+np.sin(2*t*(n-m))*(3*np.cos(2*t*(k-l))*g*((4*1j)*b+l+m)+np.sin(2*t*(k-l))*(2*g**2-(l-m)*((12*1j)*b+l+5*m))))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*((2*1j)*b+l)*(-16*b**2+g**2+l**2+3*m**2+(4*1j)*b*(l+3*m))+np.sin(2*t*(k-l))*(g**4+(32*1j)*b**3*(l-m)-2*l**2*m**2+2*m**4+g**2*(l**2+3*m**2)-8*b**2*(2*g**2-l**2-4*l*m+5*m**2)+(4*1j)*b*(g**2*(l+3*m)-2*m*(l**2+l*m-2*m**2))))+2*a*(np.cos(2*t*(n-m))*(48*b**2*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))-(24*1j)*b*(np.sin(2*t*(k-l))*g+np.cos(2*t*(k-l))*(l-m))*(l+m)+2*np.cos(2*t*(k-l))*(-l**3-3*l**2*m+3*l*m**2+m**3)-np.sin(2*t*(k-l))*g*(g**2+3*(l+m)**2))+np.sin(2*t*(n-m))*(np.cos(2*t*(k-l))*g*(-48*b**2+g**2+(24*1j)*b*(l+m)+3*(l+m)**2)+2*np.sin(2*t*(k-l))*(24*b**2*(l-m)+g**2*(l+3*m)-2*m*(l**2+l*m-2*m**2)+(4*1j)*b*(2*g**2-l**2-4*l*m+5*m**2)))))*np.log(256*a**4+256*b**4+g**4+512*a**3*m+8*g**2*m**2+16*m**4+128*b*g*m*w+8*g**2*w**2-32*m**2*w**2+16*w**4+32*a**2*(16*b**2+g**2+12*m**2-4*w**2)+32*a*(16*b**2*m+8*b*g*w+m*(g**2+4*m**2-4*w**2))-32*b**2*(g**2-4*(m**2+w**2))))/(8*(g**2+(l-m)**2)*(16*a**2-16*b**2+g**2+l**2+2*l*m+m**2+(8*1j)*b*(l+m)+8*a*((4*1j)*b+l+m)))
    return ret
    
def S_pp_baja_int(w, t, n, m, g, nu):
    """
    La integral que va en S_pp_baja
    """
    ret = (4*np.sin(2*t*(n-m))*(2*m+nu)*np.arctan((2*((2*m+nu)-w))/g)+2*np.cos(2*t*(n-m))*g*np.arctan((2*(-(2*m+nu)+w))/g)+4*np.sin(2*t*(n-m))*(2*m+nu)*np.arctan((2*((2*m+nu)+w))/g)-2*np.cos(2*t*(n-m))*g*np.arctan((2*((2*m+nu)+w))/g)-2*np.cos(2*t*(n-m))*(2*m+nu)*np.log(4*(2*m+nu)**2+g**2-8*(2*m+nu)*w+4*w**2)-np.sin(2*t*(n-m))*g*np.log(4*(2*m+nu)**2+g**2-8*(2*m+nu)*w+4*w**2)-2*np.cos(2*t*(n-m))*(2*m+nu)*np.log(4*(2*m+nu)**2+g**2+8*(2*m+nu)*w+4*w**2)-np.sin(2*t*(n-m))*g*np.log(4*(2*m+nu)**2+g**2+8*(2*m+nu)*w+4*w**2))/4
    return ret
    
def S_pp_baja_int_num(wc, t, n, m, g, nu):
    """
    La integral que va en S_pp_baja, pero numericamente
    """
        
    def L(w, t, n, m, g, nu):
        anm, bnm, bm = np.cos(2*t*(n-m)), np.sin(2*t*(n-m)), 2*m+nu

        return (4*(bm-w)*anm-2*g*bnm)/(g**2+4*(bm-w)**2)
        
    def integrando(w, t, n, m, g, nu):
        return w* ( L(w, t, n, m, g, nu)+L(-w, t, n, m, g, nu) )
    
    inte = np.array([])
    for ti in t:
        valor = complex_int(integrando, 0, wc, (ti, n, m, g, nu))
        inte = np.append(inte, [valor])
        
    return inte 



def S_pp_baja(t,c,nu, g, wc):
    """
    El termino que hace falta para tener sigma_pp, para bajas temperaturas
    """
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            r = c[n_i]*c[m_i]*(S_pp_baja_int(wc, t, n, m, g, nu)-S_pp_baja_int(0, t, n, m, g, nu))
            suma = suma + r
    return suma * (B(c,nu,t) * g) / (np.pi)
   
def S_pp_baja_num(t, c, nu, g, wc):
    """
    El termino que hace falta para tener sigma_pp, para bajas temperaturas
    """ 
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            r = c[n_i]*c[m_i]*S_pp_baja_int_num(wc, t, n, m, g, nu)
            suma = suma + r
            
    return suma * (B(c,nu,t) * g) / (np.pi)

    
def sigma_baja(t, c, nu, g, wc, e):
    """
    Devuelve, para T=0 las dispersiones sxx, spp, sxp
    """
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print n, m, k, l
                    r = c[n_i]*c[m_i]*np.conj(c[k_i]*c[l_i])*(int_baja(wc, t, n, m, k, l, g, nu)-int_baja(0, t, n, m, k, l, g, nu))
                    suma = suma + r
                    
    sxx = suma* (np.abs(B(c,nu,t))**2 *g / np.pi)
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx-.5*S_pp_baja(t, c, nu, g, wc)+sxp_dt+g*sxp
    
#    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)


    return sxx, spp, sxp

def sigma_baja_est(t, nu, g, wc):
    """
    Devuelve, para T=0 las dispersiones sxx, spp, sxp, si no hay driving
    """
    n,m,k,l = 0,0,0,0
    r = (int_baja(wc, t, n, m, k, l, g, nu)-int_baja(0, t, n, m, k, l, g, nu))
    
    c = np.array([1])
    sxx = r * (np.abs(B(c,nu,t))**2 *g / np.pi)
    sxp = deriv(sxx, t)
    
    spp = sxx -.5*S_pp_baja(t, c, nu, g, wc) + g * sxp
    
    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)


    return sxx, spp, sxp
    
    
def sigma_baja_num(t, c, nu, g, wc, e):
    """
    Devuelve, para T=0 las dispersiones sxx, spp, sxp. Las int hechas numericamente. 
    """
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print n, m, k, l
                    r = c[n_i]*c[m_i]*np.conj(c[k_i]*c[l_i])*int_baja_num(wc, t, n, m, k, l, g, nu)
                    suma = suma + r
    sxx = suma * (np.abs(B(c,nu,t))**2 *g / np.pi)
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx-S_pp_baja_num(t, c, nu, g, wc)+sxp_dt+g*sxp
    
#    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)


    return sxx, spp, sxp
    
    

def sigma_alta(t, c, nu, g, e):
    """
    Disp para T infinita. 
    """
    
    def int_alta(t, n, m, k, l, g, nu):
        ret = ((g*np.cos(2*(k-l+m-n)*t)+2*(-l+m)*np.sin(2*(k-l+m-n)*t))/(4*(l-m)**2+g**2)-(g*np.cos(2*(-k+l+m-n)*t)+2*(l+m+nu)*np.sin(2*(-k+l+m-n)*t))/(g**2+4*(l+m+nu)**2))/2
        return ret
    
    
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print n, m, k, l
                    
                    r = c[n_i]*c[m_i]*c[k_i]*c[l_i]*int_alta(t, n, m, k, l, g, nu)
                    suma = suma + r
                    
    sxx = suma *  ( 2*g*B(c,nu,t)**2 )
    sxx = suma * (B(c,nu,t)**2 *g / np.pi)
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx+sxp_dt+g*sxp
    
    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)
    
    return sxx, spp, sxp

def coth(x): 
        if x>=100:
            
            return 1
        else:
                return np.cosh(x)/np.sinh(x)
            
def S_pp_int_num(wc, t, n, m, g, nu, T):
    """
    La integral que va en S_pp_baja, pero numericamente
    """
    
    def L(w, t, n, m, g, nu):
        anm, bnm, bm = np.cos(2*t*(n-m)), np.sin(2*t*(n-m)), 2*m+nu

        return (4*(bm-w)*anm-2*g*bnm)/(g**2+4*(bm-w)**2)
        
    def integrando(w, t, n, m, g, nu, T):
        return w* ( L(w, t, n, m, g, nu)+L(-w, t, n, m, g, nu) ) * coth(w/(2*T))
    
    inte = np.array([])
    for ti in t:
        valor = complex_int(integrando, 0, wc, (ti, n, m, g, nu, T))
        inte = np.append(inte, [valor])
        
    return inte

####################################################
def sigma_num(t, c, nu, g, wc, e, T):
    
    """
    Devuelve, para T arbitraria las dispersiones sxx, spp, sxp
    """
    if wc/(2*T) >= 100:
        print 'warning: coth es 1'
    

        
    def alpha_R(w, t, n,m,k,l, g, nu, T):
        return w *   coth(w/(2*T))   * R(w,t,n,m,k,l,g,nu)
         
    def integ(wc, t, n, m, k, l, g, nu, T):
        ret = np.array([])
        for ti in t:
            
            valor = complex_int(alpha_R, .0001, wc, (ti, n, m, k, l, g, nu, T))
            ret = np.append(ret, [valor])
        
        return ret
        
    enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
    
    suma = np.array(np.zeros(len(t)))
    for n_i, n in enumerate(enes):
        for m_i, m in enumerate(enes):
            for k_i, k in enumerate(enes):
                for l_i, l in enumerate(enes):
                    print 'Num: ', n, m, k, l
                    r = c[n_i]*c[m_i]*np.conj(c[k_i]*c[l_i]) * integ(wc, t, n, m, k, l, g, nu, T)
                    suma = suma + r
                    
    sxx = suma * (np.abs(B(c,nu,t))**2 *g / np.pi)
    
    def S_pp(t, c, nu, g, wc, T):
        """
        El termino que hace falta para tener sigma_pp
        """ 
        enes = np.linspace(-(len(c)-1)/2, (len(c)-1)/2, len(c))
        
        suma = np.array(np.zeros(len(t)))
        for n_i, n in enumerate(enes):
            for m_i, m in enumerate(enes):
                r = c[n_i]*c[m_i]*S_pp_int_num(wc, t, n, m, g, nu, T)
                suma = suma + r
                
        return suma * (B(c,nu,t) * g) / (np.pi)
        
    sxp = deriv(sxx, t)
    sxp_dt = deriv(sxp, t)
    spp = (1+e*2*np.cos(2*t))*sxx-S_pp(t, c, nu, g, wc, T)+sxp_dt+g*sxp
#    
    sxx, spp, sxp = np.real(sxx), np.real(spp), np.real(sxp)


    return sxx, spp, sxp
################################################################3